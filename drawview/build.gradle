apply plugin: 'com.android.library'
//apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
//apply plugin: "com.jfrog.artifactory"
apply plugin: 'maven-publish'
apply plugin: 'maven'

// CONFIGURATION FOR POM FILE
def pomConfig = {
    licenses {
        license {
            name "${licence_name}"
            url "${licence_url}"
            distribution "${licence_distribution}"
        }
    }
    developers {
        developer {
            id "${developer_id}"
            name "${developer_name}"
            email "${developer_email}"
        }
    }

    scm {
        url "${maven_url}"
    }
}

// PUBLISH RELEASE VERSION IN BINTRAY USING
// gradlew install
// gradlew bintrayUpload
bintray {
    user = System.getProperty('bintray.user')
    key = System.getProperty('bintray.key')
    publications = ['MyPublication']
    override = true

    pkg {
        repo = "${bintray_pkg_repo}"
        name = "${bintray_pkg_name}"
        userOrg = "${developer_id}"
        licenses = ["${bintray_pkg_licences}"]
        vcsUrl = "${bintray_pkg_vcs_url}"

        version {
            name = "${maven_version}"
            desc = "${maven_description}"
            released  = new Date()
            vcsTag = "${maven_version}"
            //attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        }
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            groupId "${maven_group_id}"
            artifactId "${maven_artifact_id}"
            version "${maven_version}"

            pom.withXml {
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }

                def root = asNode()
                root.appendNode('description', "${maven_description}")
                root.appendNode('name', "${maven_name}")
                root.appendNode('url', "${maven_url}")
                root.children().last() + pomConfig
            }
        }
    }
}

// to publish SNAPSHOTs to http://oss.jfrog.org/oss-snapshot-local/
// and !SNAPSHOTs to http://oss.jfrog.org/oss-release-local/
// ./gradlew artifactoryPublish
/*artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        contextUrl = 'https://oss.jfrog.org/artifactory'
        repository {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            repoKey = 'oss-snapshot-local'
            maven = true

        }
        resolve {
            repository {
                repoKey = 'libs-snapshot'
                username = "${artifactory_user}"
                password = "${artifactory_password}"
                maven = true

            }
        }
        defaults {
            publications ('maven')
            publishConfigs ('archives')
            publishPom = true
            publishArtifacts = true
            properties = [ 'bintray.version': "${snapshot_version}" ]
        }
    }
}*/

//gradlew bintrayUpload -Dbintray.user=<YOUR_USER_NAME> -Dbintray.key=<YOUR_API_KEY>

// To upload "SNAPSHOT" as aar into GitHub
uploadArchives {
    repositories.mavenDeployer {
        def deployPath = file(getProperty('aar.deployPath'))
        repository(url: "file://${deployPath.absolutePath}")
        pom.project {
            packaging "aar"
            groupId "${maven_group_id}"
            artifactId "${maven_artifact_id}"
            version "${snapshot_version}"
        }
    }
}

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 14
        versionName "1.3.1"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:animated-vector-drawable:27.1.1'
    implementation 'com.android.support:exifinterface:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'

    // THIRD PARTY
    api 'com.squareup.picasso:picasso:2.71828'
    api 'jp.wasabeef:picasso-transformations:2.2.1'
    api 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'

    implementation 'com.wonderkiln:camerakit:0.12.6'
}